}
params %<>%
mutate(latency = latency * rate,
precision = precision * rate,
pBetween = -999,
nReps = nReps,
date = strftime(Sys.time())
)
for(thisParticipant in params$participant){
thisLatency <- params %>% filter(participant == thisParticipant) %>% pull(latency)
thisPrecision <- params %>% filter(participant == thisParticipant) %>% pull(precision)
cdfOne <- pnorm(rate, thisLatency, thisPrecision)
cdfZero <- pnorm(0, thisLatency, thisPrecision)
thisPBetween <- cdfOne - cdfZero
params %<>% mutate(
pBetween = replace(pBetween, participant == thisParticipant, thisPBetween)
)
}
#
# write.csv(
#   file = 'ParamsTwoStreamSingleCue2019.csv',
#   x = params,
#   row.names = F)
#
}
vignette()
library('mixRSVP')
browseVignettes('mixRSVP')
browseVignettes('mixRSVP')
browseVignettes('mixRSVP')
setwd("~/Documents/attention_tempresltn/letters_words/McCloskey_patient/RansleyExperimentWordsLettersRSVP/wordsLettersRSVP/analysis")
knitr::opts_chunk$set(echo = TRUE)
#Loads raw data from MATLAB files for second backwards paper first experiment
#First experiment of second backwards-letters paper. random orientation each trial.
rawDataPath<- file.path("..","data","MBL")
files <- dir(path=rawDataPath,pattern='.txt')  #find all data files in this directory
dfAll<-data.frame()
print(files)
knitr::opts_chunk$set(echo = TRUE)
#Loads raw data from MATLAB files for second backwards paper first experiment
#First experiment of second backwards-letters paper. random orientation each trial.
rawDataPath<- file.path("..","data","MBL")
files <- dir(path=rawDataPath,pattern='.txt')  #find all data files in this directory
dfAll<-data.frame()
print(files)
for (i in 1:length(files)) { #read in each file
fileThis<- file.path(rawDataPath,files[i])
rawData<- tryCatch(
read.table( fileThis,  sep="\t", header=TRUE, strip.white=TRUE),
error=function(e) {
stop( paste0("ERROR reading the file ",fname," :",e) )
} )
filename<-files[i]
apparentSubjectName <- strsplit(filename,split="_")[[1]][1]
print(paste("Apparent subject name about to load is",apparentSubjectName))
subjectName<- as.character(  rawData$subject[1] )
if (apparentSubjectName != subjectName) {
stop( paste("WARNING apparentSubjectName",apparentSubjectName," from filename does not match subjectName in data structure",
subjectName, "in file",files[i]) )
}
rawData$file <- filename
dfThis<- turnRawPsychopyOutputIntoMeltedDataframe(rawData)
tryCatch(
dfAll<-rbind(dfAll,dfThis), #if fail to bind new with old,
error=function(e) { #Give feedback about how the error happened
cat(paste0("Tried to merge but error:",e) )
} )
}
for (i in 1:length(files)) { #read in each file
fileThis<- file.path(rawDataPath,files[i])
rawData<- tryCatch(
read.table( fileThis,  sep="\t", header=TRUE, strip.white=TRUE),
error=function(e) {
stop( paste0("ERROR reading the file ",fname," :",e) )
} )
filename<-files[i]
apparentSubjectName <- strsplit(filename,split="_")[[1]][1]
print(paste("Apparent subject name about to load is",apparentSubjectName))
subjectName<- as.character(  rawData$subject[1] )
if (apparentSubjectName != subjectName) {
stop( paste("WARNING apparentSubjectName",apparentSubjectName," from filename does not match subjectName in data structure",
subjectName, "in file",files[i]) )
}
rawData$file <- filename
dfThis<-rawData # turnRawPsychopyOutputIntoMeltedDataframe(rawData)
tryCatch(
dfAll<-rbind(dfAll,dfThis), #if fail to bind new with old,
error=function(e) { #Give feedback about how the error happened
cat(paste0("Tried to merge but error:",e) )
} )
}
dfThis
dfAll
colnames(dfAll)
E<- dfAll
#Calculate the serial position error
E$SPE<- E$respSP - E$targetSP
E<- dfAll
sanityVisualCheck<-TRUE
if (sanityVisualCheck) {
library(ggplot2)
g=ggplot(E, aes(x=responsePosRelative0))
#plot data
g<-g+geom_histogram(binwidth=1)
g
}
E<- dfAll
sanityVisualCheck<-TRUE
if (sanityVisualCheck) {
library(ggplot2)
g=ggplot(E, aes(x=responsePosRelative1))
#plot data
g<-g+geom_histogram(binwidth=1)
g
}
View(E)
E<- dfAll
sanityVisualCheck<-TRUE
if (sanityVisualCheck) {
library(ggplot2)
g=ggplot(E, aes(x=responsePosRelative1))
#plot data
g<-g+geom_histogram(binwidth=1)
g<-g+ xlim(-15,15) #18 items per stream. Based on Kim's program so included letters that were never presented in the stream
g
}
g=ggplot(E, aes(x=responsePosRelative0))
#plot data
g<-g+geom_histogram(binwidth=1) + xlab('serial position error') + ggtitle('left letter')
g<-g+ xlim(-15,15) #18 items per stream. Based on Kim's program so included letters that were never presented in the stream
g
E<- dfAll
sanityVisualCheck<-TRUE
if (sanityVisualCheck) {
library(ggplot2)
g=ggplot(E, aes(x=responsePosRelative0))
#plot data
g<-g+geom_histogram(binwidth=1) + xlab('serial position error') + ggtitle('left letter')
g<-g+ xlim(-13,13) #18 items per stream. Based on Kim's program so included letters that were never presented in the stream
g
g=ggplot(E, aes(x=responsePosRelative1))
#plot data
g<-g+geom_histogram(binwidth=1) + xlab('serial position error') + ggtitle('left letter')
g<-g+ xlim(-13,13) #18 items per stream. Based on Kim's program so included letters that were never presented in the stream
g
}
colnames(E)
columnsToMelt<- colnames(df)[11:20]
#https://stackoverflow.com/questions/23945350/reshaping-wide-to-long-with-multiple-values-columns
dl<-  dfAll %>%
gather(v, value, columnsToMelt) %>%
separate(v, c("var", "col")) %>%
arrange(subject,trialnum) %>%
spread(col, value) %>% rename(side=var)
library(dplyr)
library(tidyr)
columnsToMelt<- colnames(df)[11:20]
#https://stackoverflow.com/questions/23945350/reshaping-wide-to-long-with-multiple-values-columns
dl<-  dfAll %>%
gather(v, value, columnsToMelt) %>%
separate(v, c("var", "col")) %>%
arrange(subject,trialnum) %>%
spread(col, value) %>% rename(side=var)
dw <- read.table(header=T, text='
sbj f1.avg f1.sd f2.avg f2.sd  blabla
A   10    6     50     10      bA
B   12    5     70     11      bB
C   20    7     20     8       bC
D   22    8     22     9       bD
')
dw %>%
gather(v, value, f1.avg:f2.sd) %>%
separate(v, c("var", "col")) %>%
arrange(sbj) %>%
spread(col, value)
library(dplyr)
library(tidyr)
columnsToMelt<- colnames(dfAll)[11:20]
#https://stackoverflow.com/questions/23945350/reshaping-wide-to-long-with-multiple-values-columns
dl<-  dfAll %>%
gather(v, value, columnsToMelt) %>%
separate(v, c("var", "col")) %>%
arrange(subject,trialnum) %>%
spread(col, value) %>% rename(side=var)
rownames(dl)<-NULL
#Calculate the serial position error
#E$SPE<- E$respSP - E$targetSP
colnames(dfAll)
dl<-  dfAll %>%
gather(v, value, columnsToMelt) %>%
separate(v, c("var", "col"))
dl<-  dfAll %>%
gather(v, value, columnsToMelt)
dl
unique(dl$value)
unique(dl$v)
dl<-  dfAll %>%
gather(v, value, columnsToMelt) %>%
separate(v, c("var", "col")) %>%
,kll
dfAll %>%
gather(v, value, columnsToMelt) %>%
separate(v, c("var", "col"))
columnsToMelt<- colnames(dfAll)[11:20]
#https://stackoverflow.com/questions/23945350/reshaping-wide-to-long-with-multiple-values-columns
dl<-  dfAll %>%
gather(v, value, columnsToMelt) %>%
separate(v, c("var", "col")) %>%
arrange(file,trialnum)
columnsToMelt<- colnames(dfAll)[11:20]
#https://stackoverflow.com/questions/23945350/reshaping-wide-to-long-with-multiple-values-columns
dl<-  dfAll %>%
gather(v, value, columnsToMelt) %>%
separate(v, c("var", "col")) %>%
arrange(file,trialnum) %>%
spread(col, value) %>% rename(side=var)
dl
dw <- read.table(header=T, text='
sbj f1.avg f1.sd f2.avg f2.sd  blabla
A   10    6     50     10      bA
B   12    5     70     11      bB
C   20    7     20     8       bC
D   22    8     22     9       bD
')
dw %>%
gather(v, value, f1.avg:f2.sd) %>%
separate(v, c("var", "col")) %>%
arrange(sbj) %>%
spread(col, value)
dw %>%
+   gather(v, value, f1.avg:f2.sd) %>%
+   separate(v, c("var", "col"))
dw <- read.table(header=T, text='
sbj f1.avg f1.sd f2.avg f2.sd  blabla
A   10    6     50     10      bA
B   12    5     70     11      bB
C   20    7     20     8       bC
D   22    8     22     9       bD
')
dw %>%
gather(v, value, f1.avg:f2.sd) %>%
separate(v, c("var", "col"))
dw %>%
gather(v, value, f1.avg:f2.sd)
?separate
dl<-  dfAll %>%
gather(v, value, columnsToMelt)
dl
dl$v
unique(dl$v)
dl<-  dfAll %>%  gather(v, value, columnsToMelt)
#Separate the new v column into 1 and 2 (corresponding to left and right)
dl %>% separate(col = v, into = c("var", "col"), sep = -1)
dl<-  dfAll %>%  gather(v, value, columnsToMelt)
dl
dl<- dl %>% separate(col = v, into = c("var", "col"), sep = -1)
dl
table(dl$col)
dl %>% arrange(file,trialnum) %>%
spread(col, value)
separate(v, c("var", "col"))
dl %>% arrange(file,trialnum) %>%
spread(col, value)
dw %>%
gather(v, value, f1.avg:f2.sd) %>%
separate(v, c("var", "col"))
dw %>%
gather(v, value, f1.avg:f2.sd)
dl<-  dfAll %>%  gather(v, value, columnsToMelt)
#attributes dropped but that's ok
#Separate the new v column into 0 and 1 (corresponding to left and right)
dl<- dl %>% separate(col = v, into = c("col", "var"), sep = -1) #This means separate it at the last character,
#which is always 0 or 1 corresponding to left and right
dl
dl<-  dfAll %>%  gather(v, value, columnsToMelt)
#attributes dropped but that's ok
#Separate the new v column into 0 and 1 (corresponding to left and right)
dl<- dl %>% separate(col = v, into = c("col", "var"), sep = -1) #This means separate it at the last character,
#which is always 0 or 1 corresponding to left and right
dl<- dl %>% arrange(file,trialnum) %>%
spread(col, value)
dl
dl<-  dfAll %>%  gather(v, value, columnsToMelt)
#attributes dropped but that's ok
#Separate the new v column into 0 and 1 (corresponding to left and right)
dl<- dl %>% separate(col = v, into = c("col", "var"), sep = -1) #This means separate it at the last character,
#which is always 0 or 1 corresponding to left and right
dl<- dl %>% arrange(file,trialnum) %>%
spread(col, value) %>% rename(side=var)
View(dl)
rownames(dl)
colnames(dl)
library(dplyr)
library(tidyr)
columnsToMelt<- colnames(dfAll)[11:20]
#https://stackoverflow.com/questions/23945350/reshaping-wide-to-long-with-multiple-values-columns
dl<-  dfAll %>%  gather(v, value, columnsToMelt)
#attributes dropped but that's ok
#Separate the new v column into 0 and 1 (corresponding to left and right)
dl<- dl %>% separate(col = v, into = c("col", "var"), sep = -1) #This means separate it at the last character,
#which is always 0 or 1 corresponding to left and right
dl<- dl %>% arrange(file,trialnum) %>%
spread(col, value) %>% rename(side=var, SPE=responsePosRelative)
rownames(dl)<-NULL
browseVignettes('mixRSVP')
colnames(dfAll)
colnames(dl)
possibleTargetSP<- sort(unique(dl$cueSerialPos))
possibleTargetSP
numItemsInStream <- 17
possibleTargetSP<- sort(unique(dl$cueSerialPos))
minTargetSP <- min(possibleTargetSP)
maxTargetSP <- max(possibleTargetSP)
minSPE <- 1 - maxTargetSP
minTargetSP
numItemsInStream <- 17
dl$cueSerialPos <- as.numeric(dl$cueSerialPos) )
numItemsInStream <- 17
dl$cueSerialPos <- as.numeric(dl$cueSerialPos)
possibleTargetSP<- sort(unique(dl$cueSerialPos))
minTargetSP <- min( possibleTargetSP )
maxTargetSP <- max( possibleTargetSP )
minSPE <- 1 - maxTargetSP
maxSPE <- numItemsInStream - minTargetSP
minSPE
maxSPE
g=ggplot(dl, aes(x=SPE)) + theme_apa() + facet_grid(side~.)
#plot data
g<-g+geom_histogram(binwidth=1) + xlim(minSPE,maxSPE)
show(g)
dl$SPE
dl$SPE <- as.numeric(dl$SPE)
g=ggplot(dl, aes(x=SPE)) + theme_apa() + facet_grid(side~.)
#plot data
g<-g+geom_histogram(binwidth=1) + xlim(minSPE,maxSPE)
show(g)
dl$side
dl[dl$side=="0",]
dl[dl$side=="0",]$side <- "left"
dl[dl$side=="1",]$side <- "right"
g=ggplot(dl, aes(x=SPE)) + theme_apa() + facet_grid(side~.)
#plot data
g<-g+geom_histogram(binwidth=1) + xlim(minSPE,maxSPE)
show(g)
browseVignettes('mixRSVP')
?plot_hist_with_fit
colnames(dl)
dlLeft<- dl %>% filter(side=="Left")
plot_hist_with_fit(dlLeft,minSPE,maxSPE,df$cueSerialPos,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
minSPE
maxSPE
dlLeft<- dl %>% filter(side=="Left")
plot_hist_with_fit(dlLeft,-12,maxSPE,df$cueSerialPos,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
?rename
dl<- dl %>% rename(targetSP = cueSerialPos)
dlLeft<- dl %>% filter(side=="Left")
plot_hist_with_fit(dlLeft,-11,maxSPE,df$targetSP,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
plot_hist_with_fit(dlLeft,-11,maxSPE,dl$targetSP,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
plot_hist_with_fit(dlLeft,-11,maxSPE,dlLeft$targetSP,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
createGuessingDistribution(-11,12,dlLeft$targetSP,numItemsInStream)
numItemsInStream
dl$targetSP
dl$SPE
dlLeft$SPE
dl$side
dl<- dl %>% rename(targetSP = cueSerialPos)
knitr::opts_chunk$set(echo = TRUE)
#Loads raw data from MATLAB files for second backwards paper first experiment
#First experiment of second backwards-letters paper. random orientation each trial.
rawDataPath<- file.path("..","data","MBL")
files <- dir(path=rawDataPath,pattern='.txt')  #find all data files in this directory
dfAll<-data.frame()
print(files)
for (i in 1:length(files)) { #read in each file
fileThis<- file.path(rawDataPath,files[i])
rawData<- tryCatch(
read.table( fileThis,  sep="\t", header=TRUE, strip.white=TRUE),
error=function(e) {
stop( paste0("ERROR reading the file ",fname," :",e) )
} )
filename<-files[i]
apparentSubjectName <- strsplit(filename,split="_")[[1]][1]
print(paste("Apparent subject name about to load is",apparentSubjectName))
subjectName<- as.character(  rawData$subject[1] )
if (apparentSubjectName != subjectName) {
stop( paste("WARNING apparentSubjectName",apparentSubjectName," from filename does not match subjectName in data structure",
subjectName, "in file",files[i]) )
}
rawData$file <- filename
dfThis<-rawData # turnRawPsychopyOutputIntoMeltedDataframe(rawData)
tryCatch(
dfAll<-rbind(dfAll,dfThis), #if fail to bind new with old,
error=function(e) { #Give feedback about how the error happened
cat(paste0("Tried to merge but error:",e) )
} )
}
E<- dfAll
sanityVisualCheck<-TRUE
if (sanityVisualCheck) {
library(ggplot2)
g=ggplot(E, aes(x=responsePosRelative0))
#plot data
g<-g+geom_histogram(binwidth=1) + xlab('serial position error') + ggtitle('left letter')
g<-g+ xlim(-11,11) #18 items per stream. Based on Kim's program so included letters that were never presented in the stream
show(g)
g=ggplot(E, aes(x=responsePosRelative1))
#plot data
g<-g+geom_histogram(binwidth=1) + xlab('serial position error') + ggtitle('right letter')
g<-g+ xlim(-11,11) #18 items per stream. Based on Kim's program so included letters that were never presented in the stream
show(g)
}
library(dplyr)
library(tidyr)
columnsToMelt<- colnames(dfAll)[11:20]
#https://stackoverflow.com/questions/23945350/reshaping-wide-to-long-with-multiple-values-columns
dl<-  dfAll %>%  gather(v, value, columnsToMelt)
#attributes dropped but that's ok
#Separate the new v column into 0 and 1 (corresponding to left and right)
dl<- dl %>% separate(col = v, into = c("col", "var"), sep = -1) #This means separate it at the last character,
#which is always 0 or 1 corresponding to left and right
dl<- dl %>% arrange(file,trialnum) %>%
spread(col, value) %>% rename(side=var, SPE=responsePosRelative)
rownames(dl)<-NULL
dl$SPE <- as.numeric(dl$SPE)
numItemsInStream <- 17
dl$cueSerialPos <- as.numeric(dl$cueSerialPos)
possibleTargetSP<- sort(unique(dl$cueSerialPos))
minTargetSP <- min( possibleTargetSP )
maxTargetSP <- max( possibleTargetSP )
minSPE <- 1 - maxTargetSP
maxSPE <- numItemsInStream - minTargetSP
dl[dl$side=="0",]$side <- "left"
dl[dl$side=="1",]$side <- "right"
g=ggplot(dl, aes(x=SPE)) + theme_apa() + facet_grid(side~.)
#plot data
g<-g+geom_histogram(binwidth=1) + xlim(minSPE,maxSPE)
show(g)
dlLeft<- dl %>% filter(side=="left") #%>% filter()
plot_hist_with_fit(dlLeft,minSPE,maxSPE,dlLeft$cueSerialPos,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
dlLeft
dl<- dl %>% rename(targetSP = cueSerialPos)
dlLeft<- dl %>% filter(side=="left") #%>% filter()
plot_hist_with_fit(dlLeft,minSPE,maxSPE,dlLeft$targetSP,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
dl<- dl %>% rename(targetSP = cueSerialPos)
dlLeft<- dl %>% filter(side=="left") #%>% filter()
plotContinuousGaussian <- TRUE
plot_hist_with_fit(dlLeft,minSPE,maxSPE,dlLeft$targetSP,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
dlLeft<- dl %>% filter(side=="left") #%>% filter()
plotContinuousGaussian <- TRUE; annotateIt <- TRUE
plot_hist_with_fit(dlLeft,minSPE,maxSPE,dlLeft$targetSP,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
?plot_hist_with_fit
dlLeft<- dl %>% filter(side=="left") #%>% filter()
plotContinuousGaussian <- TRUE; annotateIt <- TRUE
j<- plot_hist_with_fit(dlLeft,minSPE,maxSPE,dlLeft$targetSP,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
show(j + title("left"))
dlLeft<- dl %>% filter(side=="left") #%>% filter()
plotContinuousGaussian <- TRUE; annotateIt <- TRUE
j<- plot_hist_with_fit(dlLeft,minSPE,maxSPE,dlLeft$targetSP,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
j<- j + title("left"))
dlLeft<- dl %>% filter(side=="left") #%>% filter()
plotContinuousGaussian <- TRUE; annotateIt <- TRUE
j<- plot_hist_with_fit(dlLeft,minSPE,maxSPE,dlLeft$targetSP,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
j<- j + title("left")
dlLeft<- dl %>% filter(side=="left") #%>% filter()
plotContinuousGaussian <- TRUE; annotateIt <- TRUE
j<- plot_hist_with_fit(dlLeft,minSPE,maxSPE,dlLeft$targetSP,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
j<- j + ggtitle("left")
show(j)
dlLeft<- dl %>% filter(side=="left") #%>% filter()
plotContinuousGaussian <- FALSE; annotateIt <- TRUE
j<- plot_hist_with_fit(dlLeft,minSPE,maxSPE,dlLeft$targetSP,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
j<- j + ggtitle("left")
show(j)
dlRight<- dl %>% filter(side=="right") #%>% filter()
plotContinuousGaussian <- TRUE; annotateIt <- TRUE
k<- plot_hist_with_fit(dlRight,minSPE,maxSPE,dlRight$targetSP,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
dlRight<- dl %>% filter(side=="right") %>% filter(SPE>-999)  #ignore guesses of letters that weren't in the stream. Could alternatively give them random values
plotContinuousGaussian <- TRUE; annotateIt <- TRUE
k<- plot_hist_with_fit(dlRight,minSPE,maxSPE,dlRight$targetSP,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
k<- k + ggtitle("right")
show(k)
?Random
?sample.int
minSPE:maxSPE
sample.int(minSPE:maxSPE)
sample(minSPE:maxSPE)
dl[SPE==-999,]$SPE <- sample(minSPE:maxSPE)
dl[dl$SPE==-999,]$SPE <- sample(minSPE:maxSPE)
dl[dl$SPE==-999,]$SPE <- sample(minSPE:maxSPE, size=length(dl$SPE=-999),replace==TRUE)
dl[dl$SPE==-999,]$SPE <- sample(minSPE:maxSPE, size=length(dl$SPE==-999),replace==TRUE)
length(dl$SPE==-999)
sum(dl$SPE==-999)
dl[dl$SPE==-999,]$SPE <- sample(minSPE:maxSPE, size=sum(dl$SPE==-999),replace==TRUE)
sample(minSPE:maxSPE, size=sum(dl$SPE==-999),replace==TRUE)
sample(minSPE:maxSPE, size=sum(dl$SPE==-999),replace=TRUE)
guessesFakeSPEs <- minSPE:maxSPE
guessesFakeSPEs
guessesFakeSPEs <- minSPE:maxSPE
guessesFakeSPEs[-pmatch(-3:3,set)] #remove -3:3 to be sure they're modeled as part of the uniform distribution
guessesFakeSPEs[-pmatch(-3:3,guessesFakeSPEs)] #remove -3:3 to be sure they're modeled as part of the uniform distribution
guessesFakeSPEs <- minSPE:maxSPE
guessesFakeSPEs <- guessesFakeSPEs[-pmatch(-3:3,guessesFakeSPEs)] #remove -3:3 to be sure they're modeled as part of the uniform distribution
dl[dl$SPE==-999,]$SPE <- sample(guessesFakeSPEs, size=sum(dl$SPE==-999),replace=TRUE)
guessesFakeSPEs <- minSPE:maxSPE
guessesFakeSPEs <- guessesFakeSPEs[-pmatch(-3:3,guessesFakeSPEs)] #remove -3:3 to be sure they're modeled as part of the uniform distribution
dl[dl$SPE==-999,]$SPE <- sample(guessesFakeSPEs, size=sum(dl$SPE==-999),replace=TRUE)
dlRight<- dl %>% filter(side=="right") %>% filter(SPE>-999)  #ignore guesses of letters that weren't in the stream. Could alternatively give them random values
plotContinuousGaussian <- TRUE; annotateIt <- TRUE
k<- plot_hist_with_fit(dlRight,minSPE,maxSPE,dlRight$targetSP,numItemsInStream,plotContinuousGaussian,annotateIt, FALSE)
k<- k + ggtitle("right")
show(k)
.4*(922- 162.50)
